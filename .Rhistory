N <- length(data[, unique(id_curve)])
sample_curves <- ifelse(test = N >= 50,
yes = sample(x = 1:N, size = 30),
no = 1:N)
sample_curves
sample(x = 1:N, size = 30)
1:N
if (N > 50) {
sample_curves <- sample(x = 1:N, size = 30)
} else {
sample_curves <- 1:N
}
sample_curves
mu_hat ** (-1/3)
## Take a maximum bandwidth
h_max <- lambdahat ** (-1/3)
h_max
1 / (2 * lambdahat)
## Take a maximum bandwidth
hmax <- lambdahat ** (-1/3)
hmin <- 1 / (2 * lambdahat)
h_vec <- seq(hmin, hmax, len = 100)
h_vec
?estimate_nw_bw
table(unlist(lapply(sample_curves, function(i, lambdahat, data, smooth_ker){
hmax <- lambdahat ** (-1/3)
hmin <- 1 / (2 * lambdahat)
hgrid <- seq(hmin, hmax, len = 100)
hbest <- estimate_nw_bw(y = data[id_curve == i, X],
t = data[id_curve ==i, tobs],
h_grid = hgrid,
smooth_ker = smooth_ker)
}, lambdahat = lambdahat, data = data, smooth_ker = smooth_ker)))
smooth_ker = epanechnikov
table(unlist(lapply(sample_curves, function(i, lambdahat, data, smooth_ker){
hmax <- lambdahat ** (-1/3)
hmin <- 1 / (2 * lambdahat)
hgrid <- seq(hmin, hmax, len = 100)
hbest <- estimate_nw_bw(y = data[id_curve == i, X],
t = data[id_curve ==i, tobs],
h_grid = hgrid,
smooth_ker = smooth_ker)
}, lambdahat = lambdahat, data = data, smooth_ker = smooth_ker)))
hvec <- unlist(lapply(sample_curves, function(i, lambdahat, data, smooth_ker){
hmax <- lambdahat ** (-1/3)
hmin <- 1 / (2 * lambdahat)
hgrid <- seq(hmin, hmax, len = 100)
hbest <- estimate_nw_bw(y = data[id_curve == i, X],
t = data[id_curve ==i, tobs],
h_grid = hgrid,
smooth_ker = smooth_ker)
}, lambdahat = lambdahat, data = data, smooth_ker = smooth_ker))
boxplot(hvec)
summary(hvec)
h <- median(unlist(lapply(sample_curves, function(i, lambdahat, data, smooth_ker){
hmax <- lambdahat ** (-1/3)
hmin <- 1 / (2 * lambdahat)
hgrid <- seq(hmin, hmax, len = 100)
hbest <- estimate_nw_bw(y = data[id_curve == i, X],
t = data[id_curve ==i, tobs],
h_grid = hgrid,
smooth_ker = smooth_ker)
}, lambdahat = lambdahat, data = data, smooth_ker = smooth_ker)))
h
## Step 1:  recover the function at
t1 <- t - Delta / 2
t3 <- t + Delta / 2
t2 <- t
t1
t3
t2
# Step 1:  estimate the curve at
t1 <- t - Delta / 2
t3 <- t + Delta / 2
t2 <- t
rm(t)
data[, unique(id_curve)]
## Estimate using N-W
m <- length(t2)
mobj <- estimate_nw(y = data[id_curve == i, X],
t = data[id_curve == i, tobs],
tnew = t1, h = h, smooth_ker = smooth_ker)
mobj
dt <- estimate_nw(y = data[id_curve == i, X],
t = data[id_curve == i, tobs],
tnew = c(t1, t2, t3), h = h, smooth_ker = smooth_ker)
dt1 <- estimate_nw(y = data[id_curve == i, X],
t = data[id_curve == i, tobs],
tnew = t1, h = h, smooth_ker = smooth_ker)
dt2 <- estimate_nw(y = data[id_curve == i, X],
t = data[id_curve == i, tobs],
tnew = t2, h = h, smooth_ker = smooth_ker)
dt3 <- estimate_nw(y = data[id_curve == i, X],
t = data[id_curve == i, tobs],
tnew = t3, h = h, smooth_ker = smooth_ker)
dt
dt1
all.equal(dt[,mhat][1:m], dt1$mhat)
all.equal(dt[,mhat][(m + 1):(2*m)], dt2$mhat)
dt2$mhat
dt[,mhat][(m + 1):(2*m)]
all.equal(dt[,mhat][(2 * m + 1):(3 * m)], dt3$mhat)
dt[,mhat][(2 * m + 1):(3 * m)]
dt3$mhat
dt
## smooth at one at t1, t2 and t3
m <- length(t2)
dt <- estimate_nw(y = data[id_curve == i, X],
t = data[id_curve == i, tobs],
tnew = c(t1, t2, t3), h = h, smooth_ker = smooth_ker)
dt
yhat <- dt$mhat
inKernelSupp <- dt$inKernelSupp
## smooth at one at t1, t2 and t3
m <- length(t2)
dt <- estimate_nw(y = data[id_curve == i, X],
t = data[id_curve == i, tobs],
tnew = c(t1, t2, t3), h = h, smooth_ker = smooth_ker)
yhat <- dt$mhat
inKernelSupp <- dt$inKernelSupp
dt_out <- data.table::data.table(
id_curve = i, t1 = t1, xt1 = yhat[1:m], nt1_inKerSupp = inKernelSupp[1:m],
t2 = t2, xt2 = yhat[(m + 1):(2 * m)], nt2_inKerSupp = inKernelSupp[(m + 1):(2 * m)],
t3 = t3, xt3 = yhat[(2 * m + 1):(3 * m)], nt3_inKerSupp = inKernelSupp[(2 * m + 1):(3 * m)]
)
dt_out
## smooth at one at t1, t2 and t3
m <- length(t2)
dt <- estimate_nw(y = data[id_curve == i, X],
t = data[id_curve == i, tobs],
tnew = c(t1, t2, t3), h = h, smooth_ker = smooth_ker)
xtilde <- dt$mhat
inKernelSupp <- dt$inKernelSupp
dt_out <- data.table::data.table(
id_curve = i, t1 = t1, xt1 = xtilde[1:m], nt1_inKerSupp = inKernelSupp[1:m],
t2 = t2, xt2 = xtilde[(m + 1):(2 * m)], nt2_inKerSupp = inKernelSupp[(m + 1):(2 * m)],
t3 = t3, xt3 = xtilde[(2 * m + 1):(3 * m)], nt3_inKerSupp = inKernelSupp[(2 * m + 1):(3 * m)]
)
rm(xtilde, inKernelSupp)
## smooth curves
dt_smooth <- rbindlist(lapply(data[, unique(id_curve)], function(i, data, h, t1, t2, t3){
## smooth at one at t1, t2 and t3
m <- length(t2)
dt <- estimate_nw(y = data[id_curve == i, X],
t = data[id_curve == i, tobs],
tnew = c(t1, t2, t3), h = h, smooth_ker = smooth_ker)
xtilde <- dt$mhat
inKernelSupp <- dt$inKernelSupp
dt_out <- data.table::data.table(
id_curve = i, t1 = t1, xt1 = xtilde[1:m], nt1_inKerSupp = inKernelSupp[1:m],
t2 = t2, xt2 = xtilde[(m + 1):(2 * m)], nt2_inKerSupp = inKernelSupp[(m + 1):(2 * m)],
t3 = t3, xt3 = xtilde[(2 * m + 1):(3 * m)], nt3_inKerSupp = inKernelSupp[(2 * m + 1):(3 * m)]
)
rm(xtilde, inKernelSupp)
return(dt_out)
}, h = h, data = data, t1 = t1, t2 = t2, t3 = t3))
dt_smooth
## Extract X_1(g),...,X_N(g) where g = t1, t2 or t3
xt1 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt1]
xt2 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt2]
xt3 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt3]
xt1
i
dt_smooth
dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt1]
dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt2]
dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt3]
(nt1_inKerSupp > 1) & (nt3_inKerSupp > 1)
## Extract the number of observations T_ni used to estimate
## each X_1(g),...,X_N(g) where g = t1, t2 or t3
nt1_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt1_inKerSupp]
nt2_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt2_inKerSupp]
nt3_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt3_inKerSupp]
nt1_inKerSupp
w_t1_t3 <- ifelse(test = (nt1_inKerSupp > 1) & (nt3_inKerSupp > 1),
yes = 1, no = 0)
w_t1_t3
nt3_inKerSupp
w_t1_t3 <- ifelse(test = (nt1_inKerSupp > 1) & (nt3_inKerSupp > 1),
yes = 1, no = 0)
as.integer((nt1_inKerSupp > 1) & (nt3_inKerSupp > 1))
all.equal(w_t1_t3, as.integer((nt1_inKerSupp > 1) & (nt3_inKerSupp > 1)))
w_t1_t3 <- as.integer((nt1_inKerSupp > 1) & (nt3_inKerSupp > 1))
w_t1_t2 <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1))
w_t2_t3 <- as.integer((nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
w_t1_t3
w_t1_t2
w_t2_t3
w_t1_t3
w_t1_t3 * w_t1_t2
sum(w_t1_t2)
w_t1_t3 <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
sum(w_t1_t3)
## Extract the number of observations T_ni used to estimate
## each X_1(g),...,X_N(g) where g = t1, t2 or t3
nt1_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt1_inKerSupp]
nt2_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt2_inKerSupp]
nt3_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt3_inKerSupp]
w_t1_t3 <- as.integer((nt1_inKerSupp > 1) & (nt3_inKerSupp > 1))
w_t1_t2 <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1))
w_t2_t3 <- as.integer((nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
weighted
weighted = TRUE
w <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
w
sum(w_t1_t3)
sum(w_t1_t√©)
sum(w_t1_t2)
sum(w_t2_t3)
theta_t1_t3 <- mean((xt1 - xt3) ^ 2)
theta_t1_t2 <- mean((xt1 - xt2) ^ 2)
theta_t2_t3 <- mean((xt3 - xt2) ^ 2)
theta_t1_t3
theta_t1_t3 <- mean((xt1 - xt3) ^ 2)
theta_t1_t2 <- mean((xt1 - xt2) ^ 2)
theta_t2_t3 <- mean((xt3 - xt2) ^ 2)
H <- (log(theta_t1_t3) - log(theta_t1_t2))  / (2 * log(2))
H
hurst_logistic(t2[i])
## Estimate L
L <- theta_t1_t3 / (abs(t1[i] - t3[i])**(2 * H))
L
## Extract the number of observations T_ni used to estimate
## each X_1(g),...,X_N(g) where g = t1, t2 or t3
nt1_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt1_inKerSupp]
nt2_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt2_inKerSupp]
nt3_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt3_inKerSupp]
w_t1_t3 <- as.integer((nt1_inKerSupp > 1) & (nt3_inKerSupp > 1))
w_t1_t2 <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1))
w_t2_t3 <- as.integer((nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
w <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
## Estimate theta
theta_t1_t3 <- sum(w_t1_t3 * (xt1 - xt3) ^ 2, na.rm = TRUE) / sum(w_t1_t3)
theta_t1_t2 <- sum(w_t1_t2 * (xt1 - xt2) ^ 2, na.rm = TRUE) / sum(w_t1_t2)
theta_t2_t3 <- sum(w_t2_t3 * (xt3 - xt2) ^ 2, na.rm = TRUE) / sum(w_t2_t3)
H <- (log(theta_t1_t3) - log(theta_t1_t2))  / (2 * log(2))
H
## Estimate L
L <- theta_t1_t3 / (abs(t1[i] - t3[i])**(2 * H))
L
theta_t1_t3_v2 <- sum(w * (xt1 - xt3) ^ 2, na.rm = TRUE) / sum(w)
theta_t1_t2_v2 <- sum(w * (xt1 - xt2) ^ 2, na.rm = TRUE) / sum(w)
theta_t2_t3_v2 <- sum(w * (xt3 - xt2) ^ 2, na.rm = TRUE) / sum(w)
H <- (log(theta_t1_t3_v2) - log(theta_t1_t2_v2))  / (2 * log(2))
H
## Estimate L
L <- theta_t1_t3_v2 / (abs(t1[i] - t3[i])**(2 * H))
L
dt_reg <- rbindlist(lapply(1:length(t2), function(i, dt_smooth, t1, t2, t3, weighted) {
## Extract X_1(g),...,X_N(g) where g = t1, t2 or t3
xt1 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt1]
xt2 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt2]
xt3 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt3]
## Extract the number of observations T_ni used to estimate
## each X_1(g),...,X_N(g) where g = t1, t2 or t3
nt1_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt1_inKerSupp]
nt2_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt2_inKerSupp]
nt3_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt3_inKerSupp]
w_t1_t3 <- as.integer((nt1_inKerSupp > 1) & (nt3_inKerSupp > 1))
w_t1_t2 <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1))
w_t2_t3 <- as.integer((nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
w <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
## Estimate theta
theta_t1_t3w <- sum(w_t1_t3 * (xt1 - xt3) ^ 2, na.rm = TRUE) / sum(w_t1_t3)
theta_t1_t2w <- sum(w_t1_t2 * (xt1 - xt2) ^ 2, na.rm = TRUE) / sum(w_t1_t2)
theta_t2_t3w <- sum(w_t2_t3 * (xt3 - xt2) ^ 2, na.rm = TRUE) / sum(w_t2_t3)
theta_t1_t3w_v2 <- sum(w * (xt1 - xt3) ^ 2, na.rm = TRUE) / sum(w)
theta_t1_t2w_v2 <- sum(w * (xt1 - xt2) ^ 2, na.rm = TRUE) / sum(w)
theta_t2_t3w_v2 <- sum(w * (xt3 - xt2) ^ 2, na.rm = TRUE) / sum(w)
theta_t1_t3 <- mean((xt1 - xt3) ^ 2)
theta_t1_t2 <- mean((xt1 - xt2) ^ 2)
theta_t2_t3 <- mean((xt3 - xt2) ^ 2)
H <- (log(theta_t1_t3) - log(theta_t1_t2))  / (2 * log(2))
L <- theta_t1_t3 / (abs(t1[i] - t3[i])**(2 * H))
Hw <- (log(theta_t1_t3w) - log(theta_t1_t2w))  / (2 * log(2))
Lw <- theta_t1_t3w / (abs(t1[i] - t3[i])**(2 * H))
Hw_v2 <- (log(theta_t1_t3w_v2) - log(theta_t1_t2w_v2))  / (2 * log(2))
Lw_v2 <- theta_t1_t3w_v2 / (abs(t1[i] - t3[i])**(2 * H))
## Bound H : 0.1 <= H <= 1
# H <- min(max(H, 0.1), 1)
dt_out <- data.table(t = t2[i], H = H, Hw = Hw, Hw_v2 = Hw_v2, L = L, Lw = Lw, Lw_v2 = Lw_v2)
return(dt_out)
}, dt_smooth = dt_smooth, t1 = t1, t2 = t2, t3 = t3, weighted = weighted))
dt_reg
hurst_logistic(t2)
dt_reg <- rbindlist(lapply(1:length(t2), function(i, dt_smooth, t1, t2, t3, weighted) {
## Extract X_1(g),...,X_N(g) where g = t1, t2 or t3
xt1 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt1]
xt2 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt2]
xt3 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt3]
## Extract the number of observations T_ni used to estimate
## each X_1(g),...,X_N(g) where g = t1, t2 or t3
nt1_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt1_inKerSupp]
nt2_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt2_inKerSupp]
nt3_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt3_inKerSupp]
w_t1_t3 <- as.integer((nt1_inKerSupp > 1) & (nt3_inKerSupp > 1))
w_t1_t2 <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1))
w_t2_t3 <- as.integer((nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
w <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
## Estimate theta
theta_t1_t3w <- sum(w_t1_t3 * (xt1 - xt3) ^ 2, na.rm = TRUE) / sum(w_t1_t3)
theta_t1_t2w <- sum(w_t1_t2 * (xt1 - xt2) ^ 2, na.rm = TRUE) / sum(w_t1_t2)
theta_t2_t3w <- sum(w_t2_t3 * (xt3 - xt2) ^ 2, na.rm = TRUE) / sum(w_t2_t3)
theta_t1_t3w_v2 <- sum(w * (xt1 - xt3) ^ 2, na.rm = TRUE) / sum(w)
theta_t1_t2w_v2 <- sum(w * (xt1 - xt2) ^ 2, na.rm = TRUE) / sum(w)
theta_t2_t3w_v2 <- sum(w * (xt3 - xt2) ^ 2, na.rm = TRUE) / sum(w)
theta_t1_t3 <- mean((xt1 - xt3) ^ 2)
theta_t1_t2 <- mean((xt1 - xt2) ^ 2)
theta_t2_t3 <- mean((xt3 - xt2) ^ 2)
H <- (log(theta_t1_t3) - log(theta_t1_t2))  / (2 * log(2))
L <- theta_t1_t3 / (abs(t1[i] - t3[i])**(2 * H))
Hw <- (log(theta_t1_t3w) - log(theta_t1_t2w))  / (2 * log(2))
Lw <- theta_t1_t3w / (abs(t1[i] - t3[i])**(2 * Hw))
Hw_v2 <- (log(theta_t1_t3w_v2) - log(theta_t1_t2w_v2))  / (2 * log(2))
Lw_v2 <- theta_t1_t3w_v2 / (abs(t1[i] - t3[i])**(2 * Hw_v2))
## Bound H : 0.1 <= H <= 1
# H <- min(max(H, 0.1), 1)
dt_out <- data.table(t = t2[i], H = H, Hw = Hw, Hw_v2 = Hw_v2, L = L, Lw = Lw, Lw_v2 = Lw_v2)
return(dt_out)
}, dt_smooth = dt_smooth, t1 = t1, t2 = t2, t3 = t3, weighted = weighted))
dt_reg
rm(nt1_inKerSupp, nt2_inKerSupp, nt3_inKerSupp, H = H, Hw = Hw, Lw = Lw, xt1, xt2, xt3)
## Extract the number of observations T_ni used to estimate
## each X_1(g),...,X_N(g) where g = t1, t2 or t3
nt1_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt1_inKerSupp]
nt2_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt2_inKerSupp]
nt3_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt3_inKerSupp]
w <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
theta_t1_t3w <- sum(w * (xt1 - xt3) ^ 2, na.rm = TRUE) / sum(w)
theta_t1_t2w <- sum(w * (xt1 - xt2) ^ 2, na.rm = TRUE) / sum(w)
theta_t2_t3w <- sum(w * (xt3 - xt2) ^ 2, na.rm = TRUE) / sum(w)
## Extract X_1(g),...,X_N(g) where g = t1, t2 or t3
xt1 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt1]
xt2 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt2]
xt3 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt3]
## Compute Unweighed local regularity parameters
theta_t1_t3 <- mean((xt1 - xt3) ^ 2)
theta_t1_t2 <- mean((xt1 - xt2) ^ 2)
theta_t2_t3 <- mean((xt3 - xt2) ^ 2)
theta_t1_t2 <- mean((xt1 - xt2) ^ 2)
theta_t2_t3 <- mean((xt3 - xt2) ^ 2)
H <- (log(theta_t1_t3) - log(theta_t1_t2))  / (2 * log(2))
## Bound H : 0.1 <= H <= 1
# H <- min(max(H, 0.1), 1)
L <- theta_t1_t3 / (abs(t1[i] - t3[i])**(2 * H))
## Extract the number of observations T_ni used to estimate
## each X_1(g),...,X_N(g) where g = t1, t2 or t3
nt1_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt1_inKerSupp]
nt2_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt2_inKerSupp]
nt3_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt3_inKerSupp]
w <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
theta_t1_t3w <- sum(w * (xt1 - xt3) ^ 2, na.rm = TRUE) / sum(w)
theta_t1_t2w <- sum(w * (xt1 - xt2) ^ 2, na.rm = TRUE) / sum(w)
theta_t2_t3w <- sum(w * (xt3 - xt2) ^ 2, na.rm = TRUE) / sum(w)
Hw <- (log(theta_t1_t3w) - log(theta_t1_t2w))  / (2 * log(2))
Lw <- theta_t1_t3w / (abs(t1[i] - t3[i]) ** (2 * Hw))
dt_out <- data.table(t = t2[i], H = H, Hw = Hw, Lw = Lw, Wn = sum(Wn))
sum(w)
dt_out <- data.table(t = t2[i], H = H, Hw = Hw, Lw = Lw, Wn = sum(w))
rm(nt1_inKerSupp, nt2_inKerSupp, nt3_inKerSupp, H = H, Hw = Hw, Lw = Lw, xt1, xt2, xt3)
rm(nt1_inKerSupp, nt2_inKerSupp, nt3_inKerSupp,
theta_t1_t3, theta_t1_t3w, theta_t1_t2, theta_t1_t2w, theta_t2_t3, theta_t3_t3w
H = H, Hw = Hw, Lw = Lw, xt1, xt2, xt3)
rm(nt1_inKerSupp, nt2_inKerSupp, nt3_inKerSupp,
theta_t1_t3, theta_t1_t3w, theta_t1_t2, theta_t1_t2w, theta_t2_t3, theta_t3_t3w,
H = H, Hw = Hw, Lw = Lw, xt1, xt2, xt3)
## Extract X_1(g),...,X_N(g) where g = t1, t2 or t3
xt1 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt1]
xt2 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt2]
xt3 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt3]
## Compute Unweighed local regularity parameters
theta_t1_t3 <- mean((xt1 - xt3) ^ 2)
theta_t1_t2 <- mean((xt1 - xt2) ^ 2)
theta_t2_t3 <- mean((xt3 - xt2) ^ 2)
H <- (log(theta_t1_t3) - log(theta_t1_t2))  / (2 * log(2))
## Bound H : 0.1 <= H <= 1
# H <- min(max(H, 0.1), 1)
L <- theta_t1_t3 / (abs(t1[i] - t3[i])**(2 * H))
if (weighted) {
## Extract the number of observations T_ni used to estimate
## each X_1(g),...,X_N(g) where g = t1, t2 or t3
nt1_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt1_inKerSupp]
nt2_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt2_inKerSupp]
nt3_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt3_inKerSupp]
w <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
theta_t1_t3w <- sum(w * (xt1 - xt3) ^ 2, na.rm = TRUE) / sum(w)
theta_t1_t2w <- sum(w * (xt1 - xt2) ^ 2, na.rm = TRUE) / sum(w)
theta_t2_t3w <- sum(w * (xt3 - xt2) ^ 2, na.rm = TRUE) / sum(w)
Hw <- (log(theta_t1_t3w) - log(theta_t1_t2w))  / (2 * log(2))
Lw <- theta_t1_t3w / (abs(t1[i] - t3[i]) ** (2 * Hw))
dt_out <- data.table(t = t2[i], H = H, Hw = Hw, Lw = Lw, Wn = sum(w))
rm(nt1_inKerSupp, nt2_inKerSupp, nt3_inKerSupp,
theta_t1_t3, theta_t1_t3w, theta_t1_t2, theta_t1_t2w, theta_t2_t3, theta_t3_t3w,
H = H, Hw = Hw, Lw = Lw, xt1, xt2, xt3)
} else {
dt_out <- data.table(t = t2[i], H = H)
}
rm(nt1_inKerSupp, nt2_inKerSupp, nt3_inKerSupp,
theta_t1_t3, theta_t1_t3w, theta_t1_t2, theta_t1_t2w, theta_t2_t3, theta_t2_t3w,
H = H, Hw = Hw, Lw = Lw, xt1, xt2, xt3)
warnings()
## Extract X_1(g),...,X_N(g) where g = t1, t2 or t3
xt1 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt1]
xt2 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt2]
xt3 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt3]
## Compute Unweighed local regularity parameters
theta_t1_t3 <- mean((xt1 - xt3) ^ 2)
theta_t1_t2 <- mean((xt1 - xt2) ^ 2)
theta_t2_t3 <- mean((xt3 - xt2) ^ 2)
H <- (log(theta_t1_t3) - log(theta_t1_t2))  / (2 * log(2))
## Bound H : 0.1 <= H <= 1
# H <- min(max(H, 0.1), 1)
L <- theta_t1_t3 / (abs(t1[i] - t3[i])**(2 * H))
if (weighted) {
## Extract the number of observations T_ni used to estimate
## each X_1(g),...,X_N(g) where g = t1, t2 or t3
nt1_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt1_inKerSupp]
nt2_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt2_inKerSupp]
nt3_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt3_inKerSupp]
w <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
theta_t1_t3w <- sum(w * (xt1 - xt3) ^ 2, na.rm = TRUE) / sum(w)
theta_t1_t2w <- sum(w * (xt1 - xt2) ^ 2, na.rm = TRUE) / sum(w)
theta_t2_t3w <- sum(w * (xt3 - xt2) ^ 2, na.rm = TRUE) / sum(w)
Hw <- (log(theta_t1_t3w) - log(theta_t1_t2w))  / (2 * log(2))
Lw <- theta_t1_t3w / (abs(t1[i] - t3[i]) ** (2 * Hw))
dt_out <- data.table(t = t2[i], H = H, Hw = Hw, Lw = Lw, Wn = sum(w))
rm(nt1_inKerSupp, nt2_inKerSupp, nt3_inKerSupp,
theta_t1_t3, theta_t1_t3w, theta_t1_t2, theta_t1_t2w, theta_t2_t3, theta_t2_t3w,
H = H, Hw = Hw, Lw = Lw, xt1, xt2, xt3)
} else {
dt_out <- data.table(t = t2[i], H = H)
}
dt_reg <- rbindlist(lapply(1:length(t2), function(i, dt_smooth, t1, t2, t3, weighted) {
## Extract X_1(g),...,X_N(g) where g = t1, t2 or t3
xt1 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt1]
xt2 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt2]
xt3 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt3]
## Compute Unweighed local regularity parameters
theta_t1_t3 <- mean((xt1 - xt3) ^ 2)
theta_t1_t2 <- mean((xt1 - xt2) ^ 2)
theta_t2_t3 <- mean((xt3 - xt2) ^ 2)
H <- (log(theta_t1_t3) - log(theta_t1_t2))  / (2 * log(2))
## Bound H : 0.1 <= H <= 1
# H <- min(max(H, 0.1), 1)
L <- theta_t1_t3 / (abs(t1[i] - t3[i])**(2 * H))
if (weighted) {
## Extract the number of observations T_ni used to estimate
## each X_1(g),...,X_N(g) where g = t1, t2 or t3
nt1_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt1_inKerSupp]
nt2_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt2_inKerSupp]
nt3_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt3_inKerSupp]
w <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
theta_t1_t3w <- sum(w * (xt1 - xt3) ^ 2, na.rm = TRUE) / sum(w)
theta_t1_t2w <- sum(w * (xt1 - xt2) ^ 2, na.rm = TRUE) / sum(w)
theta_t2_t3w <- sum(w * (xt3 - xt2) ^ 2, na.rm = TRUE) / sum(w)
Hw <- (log(theta_t1_t3w) - log(theta_t1_t2w))  / (2 * log(2))
Lw <- theta_t1_t3w / (abs(t1[i] - t3[i]) ** (2 * Hw))
dt_out <- data.table(t = t2[i], H = H, L = L, Hw = Hw, Lw = Lw, Wn = sum(w))
rm(nt1_inKerSupp, nt2_inKerSupp, nt3_inKerSupp,
theta_t1_t3, theta_t1_t3w, theta_t1_t2,
theta_t1_t2w, theta_t2_t3, theta_t2_t3w,
H, L, Hw, Lw, xt1, xt2, xt3)
} else {
dt_out <- data.table(t = t2[i], H = H, L2)
rm(nt1_inKerSupp, nt2_inKerSupp, nt3_inKerSupp,
theta_t1_t3, theta_t1_t2, theta_t2_t3,
H, L, xt1, xt2, xt3)
}
return(dt_out)
}, dt_smooth = dt_smooth, t1 = t1, t2 = t2, t3 = t3, weighted = weighted))
dt_reg
dt_reg <- rbindlist(lapply(1:length(t2), function(i, dt_smooth, t1, t2, t3, weighted) {
## Extract X_1(g),...,X_N(g) where g = t1, t2 or t3
xt1 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt1]
xt2 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt2]
xt3 <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], xt3]
## Compute Unweighed local regularity parameters
theta_t1_t3 <- mean((xt1 - xt3) ^ 2)
theta_t1_t2 <- mean((xt1 - xt2) ^ 2)
H <- (log(theta_t1_t3) - log(theta_t1_t2))  / (2 * log(2))
## Bound H : 0.1 <= H <= 1
# H <- min(max(H, 0.1), 1)
L <- theta_t1_t3 / (abs(t1[i] - t3[i])**(2 * H))
if (weighted) {
## Extract the number of observations T_ni used to estimate
## each X_1(g),...,X_N(g) where g = t1, t2 or t3
nt1_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt1_inKerSupp]
nt2_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt2_inKerSupp]
nt3_inKerSupp <- dt_smooth[t1 == t1[i] & t2 == t2[i] & t3 == t3[i], nt3_inKerSupp]
w <- as.integer((nt1_inKerSupp > 1) & (nt2_inKerSupp > 1) & (nt3_inKerSupp > 1))
theta_t1_t3w <- sum(w * (xt1 - xt3) ^ 2, na.rm = TRUE) / sum(w)
theta_t1_t2w <- sum(w * (xt1 - xt2) ^ 2, na.rm = TRUE) / sum(w)
Hw <- (log(theta_t1_t3w) - log(theta_t1_t2w))  / (2 * log(2))
Lw <- theta_t1_t3w / (abs(t1[i] - t3[i]) ** (2 * Hw))
dt_out <- data.table(t = t2[i], H = H, L = L, Hw = Hw, Lw = Lw, Wn = sum(w))
rm(nt1_inKerSupp, nt2_inKerSupp, nt3_inKerSupp,
theta_t1_t3, theta_t1_t3w, theta_t1_t2, theta_t1_t2w,
H, L, Hw, Lw, xt1, xt2, xt3)
} else {
dt_out <- data.table(t = t2[i], H = H, L2)
rm(nt1_inKerSupp, nt2_inKerSupp, nt3_inKerSupp,
theta_t1_t3, theta_t1_t2,
H, L, xt1, xt2, xt3)
}
return(dt_out)
}, dt_smooth = dt_smooth, t1 = t1, t2 = t2, t3 = t3, weighted = weighted))
dt_reg
dt_reg[, c("h", "Delta") := .(h, Delta)]
dt_reg
gc()
gc()
gc()
